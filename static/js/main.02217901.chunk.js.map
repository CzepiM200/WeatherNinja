{"version":3,"sources":["components/Form.js","components/NearestWeather.js","components/TemperatureChart.js","components/WindSpeedChart.js","components/SubsequentWeather.js","components/WeatherPanel.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","onChange","change","id","aria-label","value","NearestWeather","this","location","weather","dt_txt","substr","src","iconName","icon","alt","main","temp","toFixed","wind","speed","humidity","clouds","all","Component","data","lables","datasets","label","fill","backgroundColor","borderColor","borderDashOffset","pointBackgroundColor","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","responsive","TemperatureChart","temperatures","labels","redraw","WindSpeedChart","windSpeed","SubsequentWeather","i","length","parseInt","WeatherPanel","App","getWeatherPromise","locationId","a","axios","get","state","URL","protocol","apiBasedURL","appid","setNewWeather","then","response","setState","city","name","list","handleChangeInputValue","e","target","error","click","handleGetForecastButtonClick","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.02217901.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <div className=\"input-group\">\r\n            <select onChange={props.change} \r\n            className=\"custom-select\" \r\n            id=\"inputGroupSelect03\" \r\n            aria-label=\"Example select with button addon\">\r\n                <option value=\"3081368\">Wrocław</option>\r\n                <option value=\"6695624\">Warszawa</option>\r\n                <option value=\"3094802\">Kraków</option>\r\n                <option value=\"3093133\">Łódź</option>\r\n                <option value=\"7530858\">Poznań</option>\r\n                <option value=\"7531002\">Gdańsk</option>\r\n                <option value=\"7531766\">Szczecin</option>\r\n                <option value=\"3102014\">Bydgoszcz</option>\r\n                <option value=\"765876\" >Lublin</option>\r\n                <option value=\"3096472\">Katowice</option>\r\n                <option value=\"7530819\">Rzeszów</option>\r\n                <option value=\"757957\">Strzyżów</option>\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\n//openweathermap.org/themes/openweathermap/assets/vendor/owm/img/widgets/04d.png\r\nconst basedIconURL = 'http://openweathermap.org/img/wn';\r\nconst celsius = 273.15;\r\n\r\n\r\nfunction genereateIconURL(iconName) {\r\n    let URL = `${basedIconURL}/${iconName}@2x.png`;\r\n    return URL;\r\n}\r\n\r\n\r\nexport class NearestWeather extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"main-panel\" className=\"row top-buffer\">\r\n                    <ul className=\"list-group list-group-horizontal full-flex\">\r\n                        <li className=\"list-group-item list-group-item-dark full-flex\">\r\n                            <b>{this.props.location} {this.props.weather.dt_txt.substr(0,16)}</b><br></br>\r\n                            <img id=\"weather-icon\" src={genereateIconURL(this.props.weather.weather[0].icon)} alt=\"...\"></img>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div id=\"latest-panel\" className=\"row top-buffer\">\r\n                    <ul className=\"list-group list-group-horizontal\">\r\n                        <li className=\"list-group-item\"><b>Temp:</b> {(this.props.weather.main.temp - celsius).toFixed(2)}°C</li>\r\n                        <li className=\"list-group-item\"><b>Wind:</b> {(this.props.weather.wind.speed).toFixed(2)}km/h</li>\r\n                        <li className=\"list-group-item\"><b>Humidity:</b> {(this.props.weather.main.humidity).toFixed(2)}%</li>\r\n                        <li className=\"list-group-item\"><b>Clouds:</b> {(this.props.weather.clouds.all).toFixed(2)}%</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default NearestWeather;","import React, { Component } from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nconst data = {\r\n  lables: [],\r\n  datasets: [\r\n    {\r\n      label: 'Temperature [°C]',\r\n      fill: true,\r\n      backgroundColor: 'rgba(75,192,192,0.4)',\r\n      borderColor: 'rgba(75,192,192,1)',\r\n      borderDashOffset: 0.0,\r\n      pointBackgroundColor: '#fff',\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n      pointHoverBorderColor: '#000',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 4,\r\n      pointHitRadius: 5,\r\n      data: []\r\n    }\r\n  ],\r\n  options: {\r\n    responsive: true\r\n  }\r\n};\r\n\r\nexport class TemperatureChart extends Component{\r\n  render(){\r\n    data.datasets[0].data = this.props.temperatures;\r\n    data.labels = this.props.labels;\r\n    \r\n    return ( \r\n      <div>\r\n          <Line data={data} redraw/>\r\n      </div>\r\n   );\r\n  }\r\n}\r\n\r\nexport default TemperatureChart;","import React, { Component } from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nconst data = {\r\n  lables: [],\r\n  datasets: [\r\n    {\r\n      label: 'Wind speed [m/s]',\r\n      fill: true,\r\n      backgroundColor: '#ffcc99' ,\r\n      borderColor: '#ffb266',\r\n      borderDashOffset: 0.0,\r\n      pointBackgroundColor: '#fff',\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: '#ffb266',\r\n      pointHoverBorderColor: '#000',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 4,\r\n      pointHitRadius: 5,\r\n      data: []\r\n    }\r\n  ],\r\n  options: {\r\n    responsive: true\r\n  }\r\n};\r\n\r\nexport class WindSpeedChart extends Component{\r\n  render(){\r\n    data.datasets[0].data = this.props.windSpeed;\r\n    data.labels = this.props.labels;\r\n    \r\n    return ( \r\n      <div>\r\n          <Line data={data} redraw/>\r\n      </div>\r\n   );\r\n  }\r\n}\r\n\r\nexport default WindSpeedChart;","import React, { Component } from 'react';\r\nimport TemperatureChart from './TemperatureChart';\r\nimport WindSpeedChart from './WindSpeedChart';\r\n\r\nconst labels = [];\r\nconst temperatures = [];\r\nconst windSpeed = [];\r\n\r\n\r\nexport class SubsequentWeather extends Component {\r\n    render () {\r\n        for (let i = 0; i < this.props.weather.length; i++) {\r\n            labels[i] = (this.props.weather[i].dt_txt.substr(0,16));\r\n            temperatures[i] = parseInt((this.props.weather[i].main.temp - 273.15).toFixed(2), 10); \r\n            windSpeed[i] = parseInt((this.props.weather[i].wind.speed).toFixed(2), 10); \r\n        }\r\n    \r\n        return (\r\n            <div id=\"charts\" className=\"col-sm-12\">\r\n                <TemperatureChart labels={labels} temperatures={temperatures}/>\r\n                <br></br>\r\n                <WindSpeedChart labels={labels} windSpeed={windSpeed}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SubsequentWeather;","import React, { Component } from 'react';\r\nimport NearestWeather from './NearestWeather';\r\nimport SubsequentWeather from './SubsequentWeather';\r\n\r\n\r\nexport class WeatherPanel extends Component {\r\n    render() {\r\n        if (this.props.weather.length > 1) {\r\n            return (\r\n                <div>\r\n                    <div className=\"row justify-content-center top-buffer full-flex\">\r\n                        <NearestWeather weather={this.props.weather[0]} location={this.props.location}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center top-buffer\">\r\n                        <SubsequentWeather weather={this.props.weather}/>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return (<div></div>);\r\n    };\r\n}\r\n\r\nexport default WeatherPanel;","import axios from 'axios';\nimport React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport WeatherPanel from './components/WeatherPanel';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: \"Wrocław\",\n      locationId: \"3081366\",\n      weather: [\"init\"],\n      URL: {\n        protocol: \"https\",\n        appid: \"c9a9dab97a39c92e2fb1365560169a74\",\n        apiBasedURL: \"api.openweathermap.org/data/2.5/forecast?id\"\n      },\n      error: \"\"\n    }\n  }\n\n  getWeatherPromise = async (locationId) => {\n    return await axios.get(`${this.state.URL.protocol}://${this.state.URL.apiBasedURL}=${locationId}&appid=${this.state.URL.appid}`)\n  };\n\n  setNewWeather = (locationId) => {\n    const pogodaPromise = this.getWeatherPromise(locationId);\n    pogodaPromise.then((response) => {\n      this.setState({ \n        location: response.data.city.name,\n        locationId: locationId,\n        weather: response.data.list\n      });\n    })    \n  };\n\n  componentDidMount() {\n    this.setNewWeather(this.state.locationId);\n  }\n\n  handleChangeInputValue = async (e) => {\n    this.setNewWeather(e.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row justify-content-center top-buffer\">\n          <div className=\"col-md-8\">\n            <Form\n              value={this.state.location}\n              change={this.handleChangeInputValue}\n              click={this.handleGetForecastButtonClick} />\n          </div>\n        </div>\n        <WeatherPanel weather={this.state.weather} location={this.state.location} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}